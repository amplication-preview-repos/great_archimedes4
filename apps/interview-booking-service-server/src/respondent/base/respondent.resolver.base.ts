/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Respondent } from "./Respondent";
import { RespondentCountArgs } from "./RespondentCountArgs";
import { RespondentFindManyArgs } from "./RespondentFindManyArgs";
import { RespondentFindUniqueArgs } from "./RespondentFindUniqueArgs";
import { CreateRespondentArgs } from "./CreateRespondentArgs";
import { UpdateRespondentArgs } from "./UpdateRespondentArgs";
import { DeleteRespondentArgs } from "./DeleteRespondentArgs";
import { BookingFindManyArgs } from "../../booking/base/BookingFindManyArgs";
import { Booking } from "../../booking/base/Booking";
import { RespondentService } from "../respondent.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Respondent)
export class RespondentResolverBase {
  constructor(
    protected readonly service: RespondentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Respondent",
    action: "read",
    possession: "any",
  })
  async _respondentsMeta(
    @graphql.Args() args: RespondentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Respondent])
  @nestAccessControl.UseRoles({
    resource: "Respondent",
    action: "read",
    possession: "any",
  })
  async respondents(
    @graphql.Args() args: RespondentFindManyArgs
  ): Promise<Respondent[]> {
    return this.service.respondents(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Respondent, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Respondent",
    action: "read",
    possession: "own",
  })
  async respondent(
    @graphql.Args() args: RespondentFindUniqueArgs
  ): Promise<Respondent | null> {
    const result = await this.service.respondent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Respondent)
  @nestAccessControl.UseRoles({
    resource: "Respondent",
    action: "create",
    possession: "any",
  })
  async createRespondent(
    @graphql.Args() args: CreateRespondentArgs
  ): Promise<Respondent> {
    return await this.service.createRespondent({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Respondent)
  @nestAccessControl.UseRoles({
    resource: "Respondent",
    action: "update",
    possession: "any",
  })
  async updateRespondent(
    @graphql.Args() args: UpdateRespondentArgs
  ): Promise<Respondent | null> {
    try {
      return await this.service.updateRespondent({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Respondent)
  @nestAccessControl.UseRoles({
    resource: "Respondent",
    action: "delete",
    possession: "any",
  })
  async deleteRespondent(
    @graphql.Args() args: DeleteRespondentArgs
  ): Promise<Respondent | null> {
    try {
      return await this.service.deleteRespondent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Booking], { name: "bookings" })
  @nestAccessControl.UseRoles({
    resource: "Booking",
    action: "read",
    possession: "any",
  })
  async findBookings(
    @graphql.Parent() parent: Respondent,
    @graphql.Args() args: BookingFindManyArgs
  ): Promise<Booking[]> {
    const results = await this.service.findBookings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
