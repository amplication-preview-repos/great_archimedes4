/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Respondent as PrismaRespondent,
  Booking as PrismaBooking,
} from "@prisma/client";

export class RespondentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RespondentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.respondent.count(args);
  }

  async respondents(
    args: Prisma.RespondentFindManyArgs
  ): Promise<PrismaRespondent[]> {
    return this.prisma.respondent.findMany(args);
  }
  async respondent(
    args: Prisma.RespondentFindUniqueArgs
  ): Promise<PrismaRespondent | null> {
    return this.prisma.respondent.findUnique(args);
  }
  async createRespondent(
    args: Prisma.RespondentCreateArgs
  ): Promise<PrismaRespondent> {
    return this.prisma.respondent.create(args);
  }
  async updateRespondent(
    args: Prisma.RespondentUpdateArgs
  ): Promise<PrismaRespondent> {
    return this.prisma.respondent.update(args);
  }
  async deleteRespondent(
    args: Prisma.RespondentDeleteArgs
  ): Promise<PrismaRespondent> {
    return this.prisma.respondent.delete(args);
  }

  async findBookings(
    parentId: string,
    args: Prisma.BookingFindManyArgs
  ): Promise<PrismaBooking[]> {
    return this.prisma.respondent
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bookings(args);
  }
}
